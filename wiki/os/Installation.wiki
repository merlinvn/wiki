For more details and helps, the [[https://wiki.archlinux.org/index.php/installation_guide#Pre-installation|Wiki Archlinux]] is your friend.

= Pre-Installation =

== Boot to usb disk ==

Using the installation usb to boot to the live environment. Remember to use
UEFI boot instead of Legacy boot, this can be changed from the BIOS setting.

The boot mode can be verified by listing the `efivars` directory. If the `ls`
command shows nothing then we are not booting by using the UEFI mode.

{{{bash
ls /sys/firmware/efi/efivars
}}}

== Connect to the Internet ==

* Check the network interface is listed and enabled, by using `ip link` or `ip a`
* Connect to the network:
  - Ethernet: just simply plug-in your network cable, and hopefully the DHCP
    will work on its own.
  - Wifi: use the tool `iwctl` to connect and authenticate with the wifi
    network. By calling the `iwctl`, you will be inside another interactive
    prompt that start with `[idw]#`. Here is some usefull commands to help you
    connect to the internet:
      * `help`: list all available commands
      * `device list`: list all wifi devices
      * `station [device] scan`: scan network for the `[device]`, in my case
        the `[device]` is `wlan0`.
      * `station [device] get-networks`: get the list of the available wifi
        networks to the `[device]`
      * `station [device] connect [SSID]`: connect to the `[SSID]` network, it
        will automatically ask for password if needed.
      * `Ctrl-d` to exit the `iwctl` prompt.
* Use `ping google.com` to verify.

== Update the system clock ==

{{{
timedatectl set-ntp true
}}}

== Partition the disk ==

If recognized by the live boot system, disks are assigned to block devices as a
"file" inside the `/dev/` folder. To identify those devices, you can use
command `lsblk` or `fdisk -l`. Normally your disk will be listed with the
following name pattern `/dev/sd[abc]/` or `/dev/nvme[xxx]`.

To start the partitioning, you can simply call `fdisk /dev/sda` to select
`/dev/sda` and be inside another prompt. When inside the prompt, use the
command `m` to list all available comands.

Here we will wipe out the disk and create partitions from scratch, besure to
back up all important data from your disk first. Then, the following partition
layout will be created:


| Mount point               | Partition                   | Partition Type       | Suggested Size             |
|---------------------------|-----------------------------|----------------------|----------------------------|
| `/mnt/boot` or `/mnt/efi` | `/dev/efi_system_partition` | EFI system partition | 550 MB                     |
| `[SWAP]`                  | `/dev/swap_partion`         | Linux swap           | 2 GB                       |
| `/mnt`                    | `/dev/root_partition`       | Linux x86_64 (/)     | All the remain of the disk |

Execute the following commands in order to create the above layouts:

1. `g`: create a new empty GPT partition table
2. `n`: create the first partion (EFI partition), accept the default settings for partition
   number `1` and first sector position. Enter `+550M` for the size, the `+` sign is
   very important here to indicate that we want to create by the size but not
   by the sector position.
3. `n`: create the second partion (swap partition), accept the default settings
   for partition number `2` and the first sector position. For the last sector,
   use `+2G` to create a 2Gb swap partition.
4. `n`: create the third partition (root partition), accept all the default
   settings to use the rest of the disk.
5. `t`: change the type of first partition to `1` (EFI system) by select `1` (first partition) and then `1` (type 1).
6. `t`: change the type of second partition to `19` (Linux swap) by select `2` (second partition) and then `19` (type 19).
7. (This is optional) `t`: change the type of third partition to `20` (Linux filesystem) by select `3` (second partition) and then `20` (type 20).
8. `w` write and quit

== Format the partitions ==

Once the new partitions are created, each of them needs to be formated with an appropriate `file system`. Run the following commands:

{{{bash
mkfs.fat -F32 /dev/sda1
mkswap /dev/sda2
mkfs.ext4 /dev/sda3
}}}

Those commands will format `sda1` as `fat32`, `sda2` as `swap`, and `sda3` as `ext4` file system.

== Mount the file systems and turn on swap ==

Mount the root volume to `/mnt`. If the root volume is `/dev/sda3`:

{{{bash
mount /dev/sda3 /mnt
}}}

Using `mkdir` to create a mount point for EFI partition: `mkdir -p /mnt/boot/EFI`. Then mount it with `mount /dev/sda1 /mnt/boot/EFI`

Turn on swap by `swapon /dev/sda2`

= Installation =

== Install essential packages ==

Use the `pacstrap` script to bootstrap the `/mnt` with some base packages:

{{{bash
pacstrap /mnt base linux linux-firmware
}}}

== Config the system ==

=== fstab ===
Generate `fstab` file by `genfstab -U /mnt >> /mnt/etc/fstab`

=== chroot ===
Change root to the new system `arch-chroot /mnt`

=== Time zone ===

{{{bash
ln -sf /usr/share/zoneinfo/[Region]/[City] /etc/localtime
hwclock --systohc
}}}

=== Localization ===

To create/edit the `locale.conf`, we have to install the editor first as the `base` package does not include them:

{{{bash
pacman -S nano vim
}}}

Edit the `/etc/locale.gen` and uncomment `en_US.UTF-8 UTF-8` line (and other locales if needed) by using `nano` or `vim`.

Generate the locales by running `locale-gen`

(optional) Create the `/etc/locale.conf` to set LANG variables and change the keyboard layout in `/etc/vconsole.conf` if neccessary.

=== Network Configuration ===

Use `nano` or `vim` to create `/etc/hostname` file with the content (change `myhostname` to the name of your beloved machine):

{{{
myhostname
}}}

Adding entries to `/etc/hosts`

{{{
127.0.0.1   localhost
::1         localhost
127.0.0.1   myhostname.localdomain myhostname
}}}

If the system has a permanent IP address, it should be used instead of `127.0.0.1`

=== Change root passsword and add new user ===

To change root password, use the command `passwd`.

It's highly recommended that you should create a separate user to use the
system. To create new user and add to root group, run the following commands:

{{{bash
useradd -m [username]
passwd [username]
usermod -aG wheel,audio,video,optical,storage neo
}}}

Remember to install `sudo` package so as new user can run `sudo ...` by `pacman -S sudo`

Use `visudo` to edit `sudoers` in order to allow the `wheel` group run `sudo ...` commands. Uncomment the folowing line in the `sudoers` file:
{{{
%wheel ALL=(ALL) ALL
}}}

=== Create boot loader ===

Install the following packages that needed to create EFI bootloader:

{{{bash
pacman -S grub efibootmgr dosfstools os-prober mtools
}}}

Mount the `/dev/sda1/` to `/boot/EFI` if you did not do it in the previous step.

Install GRUB:

{{{bash
grub-install --target=x86_64-efi --bootloader-id=grub_uefi --recheck
grub-mkconfig -o /boot/grub/grub.cfg
}}}

=== Install neccessary packages ===

The base package DOES NOT include tools from the live installation environment,
so REMEMBER to install other pacakges to suite your need for a fully functional
base system. Consider install the following softwares:
* Network manager (must have): `networkmanager`
* Text editors: `nano`, `vim`
* Tools: `git`
* Others can be install after reboot and connected to internet

Using the following command to install packges:
{{{bash
pacman -S networkmanager nano vim git
}}}

Then, enable `NetworkManager` service to automatically start network manager after reboot.

{{{bash
systemctl enable NetworkManager
}}}

=== Unmount and reboot ===

Call `exit` to return to the live installation environment. Then unmount the `/mnt`

{{{
umount -l /mnt
}}}

Call `reboot` and unplug the installation usb.

=== Reconnect to internet using Network Manager ===

After reboot, we cannot connect to internet as we use new `networkmanager`.
Using the following commands to reconnect to wifi network:

* `nmcli device wifi list`: List nearby wifi network
* `nmcli device wifi connect [SSID] password [password] ifname [device name]`: to connect to [SSID] wifi network with [password] vie the interface [device name]
* For other examples, refer to the [[https://wiki.archlinux.org/index.php/NetworkManager#nmcli_examples|Arch Wiki]]

From now on we have finished the based Arch Linux with internet so as you can install other packages of your choice, i.e. X11, windows manager, ...

